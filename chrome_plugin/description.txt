Description

Play n Note

Take notes while watching Coursera videos.

Features -
1. As you start to take notes, the video pauses. You can take your time to put down your thoughts. As you press Enter, the video resumes.

2. You can take note as you find any interesting point to make.

3. As each note gets saved, there is a timestamp associated. This timestamp is clickable - with which you can browse through the video. You can go back and forth to any interesting point that you note.

4. This extension uses Google authentication only once as you visit any video lectures list. After that you can go to any class video and a notes window would be presented.

5. If you don't like a note, it can be deleted. 

6. The notes can be moved any time to any part of the screen.

7. The sites accessed are --
	"http://playnnote.herokuapp.com/",
    "https://class.coursera.org/",
    "https://www.googleapis.com/",
    "https://www.google.com/accounts/*"

8. The ckeditor is used as rich text editor. This is where it has been downloaded from 

	"http://ckeditor.com/builder/69751b1b63c25e11a4731cfb03df0756"

9. chrome identity doesnt work in production properly. Reverting to oauth2 authentication and authorization. There was a bug in the oauth2. In the data saved in localStorage, refresh_token has to be saved. refresh_token is not returned while access token is refreshed usnig the refresh_token. Using a refresh_token, infinite number of access tokens can be retrieved. No need to expire the refresh_token and get a new refresh_token. Save the refresh_token in the first go and keep using the same for refreshing the access_token (which expires in an hr)

10. The shownotes.js and background.js would be minimized using these commands and only min versions would be deployed in extension. Minimization --
java -jar yuicompressor-2.4.8.jar -o chrome_plugin/play_n_note/shownotes.js chrome_plugin/src/shownotes.js 
java -jar yuicompressor-2.4.8.jar -o chrome_plugin/play_n_note/background.js chrome_plugin/src/background.js

TROUBLESHOOTING --

1. To restart the dyno, run this command -
heroku ps:restart DYNO

divs for dialog
<div class="ui-dialog ui-widget-content ui-corner-all ui-draggable ui-resizable" role="dialog" aria-labelledby="ui-dialog-title-dialog">
	<div class="ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix">
		<span id="ui-dialog-title-dialog" class="ui-dialog-title">Play N Note</span>
		<a class="ui-dialog-titlebar-close ui-corner-all" href="#" role="button">
			<span class="ui-icon ui-icon-closethick">close</span>
		</a>
	</div>
	<div id="dialog" class="ui-dialog-content ui-widget-content" style="width:auto; min-height: 0px"

	CKEDITOR.replace('richEdit', {position: absolute; left: 12px; top: 9px; z-index: 100001}); 

List of functions in shownotes

var moveToStr = "function moveTo(toTime) {
                            if (window.QL_player != null) {
                                window.QL_player.mediaelement_handle.setCurrentTime(toTime);
                            } else if ($('me_flash_0') != null) {
                                $('me_flash_0').setCurrentTime(toTime);
                            }
                        } ";
        var deleteNoteStr = "function deleteNote(prms) {  
                                noteId = prms.split('$')[0]; 
                                uId1  = prms.split('$')[1]; 
                                uId2 = prms.split('$')[2];  
                                vId = prms.split('$')[3] + '$' + prms.split('$')[4]; 
                                uId = '' + uId1 + uId2; 
                                $.ajax({type: 'GET', 
                                        url: SERVER_URL + '/deleteNoteExtn',
                                        data: {gId: uId, noteId: noteId, vId: vId}
                                    }); 
                                $('#cmt' + noteId).remove();
                            } ";
        var toggleLockStr = "function toggleLock(uIdvId) { 
                                uId = uIdvId.split('$')[0]; 
                                vId = uIdvId.split('$')[1] + '$' + uIdvId.split('$')[2]; 
                                if ($('#lockall' ).attr('src').indexOf('open') > -1) { 
                                    notes_public = false; 
                                    $( \"img[id^='lock']\" ).attr('src', RESOURCE_DOMAIN + '/images/lock_closed.png'); 
                                    $.ajax({type: 'GET', url: SERVER_URL + '/toggleVideoNotesExtn',
                                            data: {open:0, uId: uId, vId: vId}
                                    });
                                } else { 
                                    notes_public = true; 
                                    $( \"img[id^='lock']\" ).attr('src', RESOURCE_DOMAIN + '/images/lock_open.png'); 
                                    $.ajax({type: 'GET', url: SERVER_URL + '/toggleVideoNotesExtn',
                                        data: {open:1, uId: uId, vId: vId}
                                    });
                                }
                            } ";
        var toggleLockOneStr = "function toggleLockOne(uId1, uId2, i) { 
                                    uId = '' + uId1 + uId2; 
                                    if ($('#lock'+i).attr('src').indexOf('open') > -1) { 
                                        $('#lock'+i).attr('src', RESOURCE_DOMAIN + '/images/lock_closed.png'); 
                                        $.ajax({type: 'GET', url: SERVER_URL + '/toggleNoteExtn',
                                                data: {open:0, uId: uId, noteId: i}
                                        });
                                    } else {
                                        $('#lock'+i).attr('src', RESOURCE_DOMAIN + '/images/lock_open.png'); 
                                        $.ajax({type: 'GET', url: SERVER_URL + '/toggleNoteExtn',
                                                data: {open:1, uId: uId, noteId: i}
                                        });
                                    }
                                } ";
        var toggleSortStr = "function toggleTimeSort(gIdvId) { 
                                    gId = gIdvId.split('$')[0]; 
                                    cId = gIdvId.split('$')[1]; 
                                    lId = gIdvId.split('$')[2]; 
                                    if (sort_instant == undefined || sort_instant == 1) { 
                                        sort_instant = 0; 
                                        $.ajax({type: 'GET', dataType: 'json', url: SERVER_URL + '/reloadNotesExtn', 
                                                data: {open:-1, sortby: 'instant', googleId: 's' + gId + 's', lId: lId, cId: cId}, 
                                                success: function(data) { 
                                                    resetTable(); 
                                                    setTableData(data); 
                                                }
                                        }); 
                                        $('#sorticon').attr('src',RESOURCE_DOMAIN + '/images/lock_closed.png'); 
                                    } else {
                                        sort_instant=1; 
                                        $.ajax({type: 'GET', dataType: 'json', url: SERVER_URL + '/reloadNotesExtn', 
                                                data: {open:1, sortby: 'instant', googleId: 's' + gId + 's', lId: lId, cId: cId}, 
                                                success: function(data) { 
                                                    resetTable(); 
                                                    setTableData(data); 
                                                } 
                                        }); 
                                        $('#sorticon').attr('src', RESOURCE_DOMAIN + '/images/clock.png');
                                    }
                                } ";
        var resetTableStr = "function resetTable() { 
                                $('tr[id^=\"cmt\"]').remove(); 
                            } ";
        var setTableDataStr = "function setTableData(notesData) {
                                    if (notesData !== '' && notesData.length > 0) {
                                        for (i = 0; i < notesData.length; i++) {
                                                setRowData(unescape(notesData[i].commentsTxt),
                                                			unescape(notesData[i].commentsTxt), 
                                                            notesData[i].noteId, 
                                                            notesData[i].googleId + '$' + notesData[i].videoURL, 
                                                            notesData[i].instant);
                                        }
                                    }
                                }";
        var setRowDataStr = "function setRowData(cmts, text, timenow, uIdvId, instant) { 
                                uId = uIdvId.split('$')[0]; 
                                vId = uIdvId.split('$')[1]; 
                                uId1 = uId.substring(0, 9); 
                                uId2 = uId.substring(9, uId.length); 
                                prms = '\"' + timenow + '$' + uId1 + '$' + uId2 + '$' + vId + '\"'; 
                                content = '<a style=\"font-size:10px;z-index:50000;padding-right:0px;\" href=javascript:deleteNote(' + prms +')>
                                    <img src=\"' + RESOURCE_DOMAIN + '/images/deletecomment.png\" alt=\"Delete\"/>
                                      </a> &nbsp;' + text + '&nbsp;
                                           <a style=\"float:right\" href=javascript:moveTo(' + instant + '); >' + instant + 's</a> &nbsp;
                                           <a href=javascript:toggleLockOne(' + uId1 + ',' + uId2 + ',\"' + timenow + '\")>
                                            <img width=16 height=16 id=\"lock' + timenow + '\" src=\"' + RESOURCE_DOMAIN + '/images/lock_closed.png\" style=\"float:right\"/>
                                           </a>'; 
                                if ($('#notesTbl > tbody > tr').length == 0 ) { 
                                    $('<tr bgcolor=\"white\" id=\"cmt' + timenow + '\"><td>' + content + '</td></tr>').appendTo($('table > tbody'));
                                } else {
                                    if ($('#notesTbl > tbody > tr').length % 2 == 0 ) {
                                        $('<tr bgcolor=\"white\" id=\"cmt' + timenow + '\"><td>' + content + '</td></tr>').insertBefore($('table > tbody > tr:first'));
                                    } else {
                                        $('<tr bgcolor=\"grey\" id=\"cmt' + timenow + '\"><td>' + content + '</td></tr>').insertBefore($('table > tbody > tr:first'));
                                    } 
                                }
                                if ($("#div" + timenow).length > 0) {
                    $("#div" + timenow).next().find("div:first-child").html(text);
                    textval = $("#div" + timenow).next().find("div:first-child").text();
                    $("#div" + timenow).find("a:first-child").next().html(textval);
                    $("#div" + timenow).mousedown(function() {

                        p = $(this).parent().position();
                        if($(this).next().css('display') == "none")
                            $(this).next().css({'display': 'block', 'width': '100%', 'top': p.top});
                        else
                            $(this).next().css('display','none');
                        
                    });
                }
                            } ";

        var setImportTableDataStr = "function setImportTableData(notesData, gId) { 
                                        if (notesData !== '' && notesData.length > 0) {
                                            for (i=0; i<notesData.length; i++) { 
                                                setImportRowData(i, unescape(notesData[i].commentsTxt), 
                                                                    notesData[i].date, 
                                                                    notesData[i].googleId + '$' + notesData[i].videoURL, 
                                                                    notesData[i].instant, 
                                                                    gId);
                                            } 
                                        }
                                    } ";
        
        var setImportRowDataStr = "function setImportRowData(i, text, timenow, uIdvId, instant, gId) { 
                                        uId = uIdvId.split('$')[0]; 
                                        vId = uIdvId.split('$')[1] + '$' + uIdvId.split('$')[2]; 
                                        uId1 = uId.substring(0, 9); 
                                        uId2 = uId.substring(9, uId.length); 
                                        prms = '\"' + i + '$' + timenow + '$' + uId1 + '$' + uId2 + '$' + vId + '$' + gId + '$' + instant + '\"'; 
                                        content = '<a style=\"font-size:10px;z-index:50000;padding-right:0px;\" href=javascript:copyNote(' + prms +')>
                                                    <img src=\"' + RESOURCE_DOMAIN + '/images/import.png\" alt=\"Import\"/>
                                                   </a> &nbsp;
                                                   <span id=\"imp' + i + '\">' + text + '</span>&nbsp;
                                                   <a style=\"float:right\" >' + instant + 's</a> &nbsp;'; 
                                        if ($('#notesTbl > tbody > tr').length == 0 ) { 
                                            $('<tr bgcolor=\"white\" id=\"cmt' + timenow + '\"><td>' + content + '</td></tr>').appendTo($('table > tbody'));
                                        } else {
                                            if ($('#notesTbl > tbody > tr').length % 2 == 0 ) {
                                                $('<tr bgcolor=\"white\" id=\"cmt' + timenow + '\"><td>' + content + '</td></tr>').insertAfter($('table > tbody > tr:first'));
                                            } else {
                                                $('<tr bgcolor=\"grey\" id=\"cmt' + timenow + '\"><td>' + content + '</td></tr>').insertAfter($('table > tbody > tr:first'));
                                            } 
                                        }
                                    } ";                
        
        var copyNoteStr = "function copyNote(dtuIdvId) { 
                                nth = dtuIdvId.split('$')[0]; 
                                tn = new Date().getTime(); 
                                timenow = dtuIdvId.split('$')[1]; 
                                vId = dtuIdvId.split('$')[4] + '$' + dtuIdvId.split('$')[5]; 
                                gId = dtuIdvId.split('$')[6]; 
                                instant = dtuIdvId.split('$')[7]; 
                                text = $('#imp' + nth).html() ; 
                                nth_1=parseInt(nth)+1; 
                                $(\'tbody tr:nth-child(' + nth_1 + ')\').remove(); 
                                $.ajax({ type: 'POST', 
                                        url: SERVER_URL + '/submitNoteExtn', 
                                        dataType: 'json', 
                                        data: {googleId: 's' + gId + 's', videoURL: vId, comments: escape(text), noteId: tn, instant: instant, ispublic: false} 
                                }); 
                            } ";
        var importNotesStr = "function importNotes(gIdvId) { 
                                gId = gIdvId.split('$')[0]; 
                                cId = gIdvId.split('$')[1]; 
                                lId = gIdvId.split('$')[2]; 
                                vId = cId + '$' + lId; 
                                if (rows_hidden == undefined || rows_hidden == false) { 
                                    $.ajax({type: 'GET',  
                                            url: SERVER_URL + '/getLectureNotesExtn',
                                            data: {uId: gId, vId: vId}, 
                                            success: function(data) { 
                                                setImportTableData(data, gId);
                                            } 
                                    }); 
                                    resetTable(); 
                                    rows_hidden = true; 
                                } else { 
                                    $.ajax({type: 'GET', 
                                            dataType: 'json', 
                                            url: SERVER_URL + '/reloadNotesExtn', 
                                            data: {open:1, sortby: 'instant', googleId: 's' + gId + 's', lId: lId, cId: cId}, 
                                            success: function(data) { 
                                                setTableData(data); 
                                            } 
                                    });  
                                    resetTable(); 
                                    rows_hidden = false;
                                }  
                            } ";
        var writeNotesStr = "function writeRichNote() { 
                                removeShortCuts(); 
                                if (!rich_text) { 
                                    rich_text = true; 
                                    if($(\"#cke_richEdit\").length == 0) { 
                                        CKEDITOR.replace('richEdit', {
                                            on: { instanceReady : function(ev) { 
                                                                    len = $(\"#cke_richEdit\").length; 
                                                                    elem = document.getElementById(\"cke_richEdit\"); 
                                                                    elem.setAttribute('style', 'position: absolute; left: 306px; top: 9px; width: 60%; z-index: 100001'); 
                                                                }
                                                }
                                        }); 
                                    } else { 
                                        $(\"#cke_richEdit\").show(); 
                                    } 
                                    if (window.QL_player != null) {
                                        window.QL_player.mediaelement_handle.pause(); 
                                        instant = window.QL_player.mediaelement_media.currentTime;
                                    } else if ($('me_flash_0') != null) { 
                                        $('me_flash_0').pauseMedia(); 
                                        instant = $('me_flash_0').currentTime();
                                    }
                                } else { 
                                    rich_text = false; 
                                    $(\"#cke_richEdit\").hide(); 
                                    $(\"#commentsTxt\").val(CKEDITOR.instances.richEdit.getData()); 
                                    CKEDITOR.instances.richEdit.setData('<p></p>'); 
                                    if (window.QL_player != null) { 
                                        window.QL_player.mediaelement_handle.play(); 
                                    } else if ($('me_flash_0') != null) { 
                                        $('me_flash_0').playMedia(); 
                                    }
                                } 
                            } ";
        var removeShortcutsStr = "function removeShortCuts() { 
                                    try { 
                                        len = window.QL_player.mediaelement_handle.options.keyActions.length; 
                                        for (i=0; i < len; i++) { 
                                            delete window.QL_player.mediaelement_handle.options.keyActions[i]; 
                                        } 
                                        window.QL_player.mediaelement_handle.enableKeyboard = false; 
                                        window.QL_player.mediaelement_handle.options.keyActions = null; 
                                    } catch (e) {} 
                                 } ";